package share

import (
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/celestiaorg/nmt/namespace"
)

func TestNewNamespaceV0(t *testing.T) {
	type testCase struct {
		name     string
		subNid   []byte
		expected namespace.ID
		wantErr  bool
	}
	testCases := []testCase{
		{
			name:   "8 byte subNid, gets left padded",
			subNid: []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08},
			expected: namespace.ID{
				0x0,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // filled zeros
				0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8}, // id with left padding
			wantErr: false,
		},
		{
			name:   "10 byte subNid, no padding",
			subNid: []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x9, 0x10},
			expected: namespace.ID{
				0x0,                                                                                      // version
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, // filled zeros
				0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0x10}, // id
			wantErr: false,
		},
		{
			name:     "11 byte subNid",
			subNid:   []byte{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x9, 0x10, 0x11},
			expected: []byte{},
			wantErr:  true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got, err := NewNamespaceV0(tc.subNid)
			if tc.wantErr {
				assert.Error(t, err)
				return
			}
			assert.NoError(t, err)
			assert.Equal(t, tc.expected, got)
		})
	}
}
