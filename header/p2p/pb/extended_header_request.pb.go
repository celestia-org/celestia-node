// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: header/p2p/pb/extended_header_request.proto

package p2p_pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_INVALID        StatusCode = 0
	StatusCode_OK             StatusCode = 1
	StatusCode_NOT_FOUND      StatusCode = 2
	StatusCode_LIMIT_EXCEEDED StatusCode = 3
)

var StatusCode_name = map[int32]string{
	0: "INVALID",
	1: "OK",
	2: "NOT_FOUND",
	3: "LIMIT_EXCEEDED",
}

var StatusCode_value = map[string]int32{
	"INVALID":        0,
	"OK":             1,
	"NOT_FOUND":      2,
	"LIMIT_EXCEEDED": 3,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ea2a1467b965216e, []int{0}
}

type ExtendedHeaderRequest struct {
	// Types that are valid to be assigned to Data:
	//	*ExtendedHeaderRequest_Origin
	//	*ExtendedHeaderRequest_Hash
	Data   isExtendedHeaderRequest_Data `protobuf_oneof:"data"`
	Amount uint64                       `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *ExtendedHeaderRequest) Reset()         { *m = ExtendedHeaderRequest{} }
func (m *ExtendedHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*ExtendedHeaderRequest) ProtoMessage()    {}
func (*ExtendedHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea2a1467b965216e, []int{0}
}
func (m *ExtendedHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedHeaderRequest.Merge(m, src)
}
func (m *ExtendedHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedHeaderRequest proto.InternalMessageInfo

type isExtendedHeaderRequest_Data interface {
	isExtendedHeaderRequest_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExtendedHeaderRequest_Origin struct {
	Origin uint64 `protobuf:"varint,1,opt,name=origin,proto3,oneof" json:"origin,omitempty"`
}
type ExtendedHeaderRequest_Hash struct {
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3,oneof" json:"hash,omitempty"`
}

func (*ExtendedHeaderRequest_Origin) isExtendedHeaderRequest_Data() {}
func (*ExtendedHeaderRequest_Hash) isExtendedHeaderRequest_Data()   {}

func (m *ExtendedHeaderRequest) GetData() isExtendedHeaderRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ExtendedHeaderRequest) GetOrigin() uint64 {
	if x, ok := m.GetData().(*ExtendedHeaderRequest_Origin); ok {
		return x.Origin
	}
	return 0
}

func (m *ExtendedHeaderRequest) GetHash() []byte {
	if x, ok := m.GetData().(*ExtendedHeaderRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

func (m *ExtendedHeaderRequest) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ExtendedHeaderRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ExtendedHeaderRequest_Origin)(nil),
		(*ExtendedHeaderRequest_Hash)(nil),
	}
}

type ExtendedHeaderResponse struct {
	Body       []byte     `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	StatusCode StatusCode `protobuf:"varint,2,opt,name=statusCode,proto3,enum=p2p.pb.StatusCode" json:"statusCode,omitempty"`
}

func (m *ExtendedHeaderResponse) Reset()         { *m = ExtendedHeaderResponse{} }
func (m *ExtendedHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*ExtendedHeaderResponse) ProtoMessage()    {}
func (*ExtendedHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea2a1467b965216e, []int{1}
}
func (m *ExtendedHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedHeaderResponse.Merge(m, src)
}
func (m *ExtendedHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedHeaderResponse proto.InternalMessageInfo

func (m *ExtendedHeaderResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ExtendedHeaderResponse) GetStatusCode() StatusCode {
	if m != nil {
		return m.StatusCode
	}
	return StatusCode_INVALID
}

func init() {
	proto.RegisterEnum("p2p.pb.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*ExtendedHeaderRequest)(nil), "p2p.pb.ExtendedHeaderRequest")
	proto.RegisterType((*ExtendedHeaderResponse)(nil), "p2p.pb.ExtendedHeaderResponse")
}

func init() {
	proto.RegisterFile("header/p2p/pb/extended_header_request.proto", fileDescriptor_ea2a1467b965216e)
}

var fileDescriptor_ea2a1467b965216e = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0x6d, 0x88, 0x38, 0xd6, 0x12, 0x06, 0x2d, 0x39, 0x85, 0xd2, 0x53, 0x51, 0x48,
	0x21, 0x3e, 0x81, 0x6d, 0x22, 0x0d, 0xd6, 0x16, 0xd6, 0x2a, 0xde, 0xe2, 0x86, 0x5d, 0xda, 0x1e,
	0xcc, 0xae, 0xd9, 0x2d, 0xe8, 0x5b, 0xf8, 0x58, 0x1e, 0x7b, 0xf4, 0x28, 0xed, 0x8b, 0x88, 0xdb,
	0xa0, 0xe2, 0x6d, 0xfe, 0xf9, 0x3f, 0xf8, 0x86, 0x81, 0xf3, 0xa5, 0x60, 0x5c, 0x54, 0x03, 0x15,
	0xab, 0x81, 0x2a, 0x06, 0xe2, 0xc5, 0x88, 0x92, 0x0b, 0x9e, 0xef, 0xd7, 0x79, 0x25, 0x9e, 0xd7,
	0x42, 0x9b, 0x48, 0x55, 0xd2, 0x48, 0xf4, 0x54, 0xac, 0x22, 0x55, 0xf4, 0x16, 0x70, 0x9a, 0xd6,
	0xe0, 0xd8, 0x72, 0x74, 0x8f, 0x61, 0x00, 0x9e, 0xac, 0x56, 0x8b, 0x55, 0x19, 0x90, 0x2e, 0xe9,
	0xbb, 0x63, 0x87, 0xd6, 0x19, 0x4f, 0xc0, 0x5d, 0x32, 0xbd, 0x0c, 0x1a, 0x5d, 0xd2, 0x6f, 0x8d,
	0x1d, 0x6a, 0x13, 0x76, 0xc0, 0x63, 0x4f, 0x72, 0x5d, 0x9a, 0xa0, 0xf9, 0xcd, 0xd3, 0x3a, 0x0d,
	0x3d, 0x70, 0x39, 0x33, 0xac, 0xf7, 0x08, 0x9d, 0xff, 0x22, 0xad, 0x64, 0xa9, 0x05, 0x22, 0xb8,
	0x85, 0xe4, 0xaf, 0xd6, 0xd3, 0xa2, 0x76, 0xc6, 0x18, 0x40, 0x1b, 0x66, 0xd6, 0x7a, 0x24, 0xb9,
	0xb0, 0xa6, 0x76, 0x8c, 0xd1, 0xfe, 0xe6, 0xe8, 0xf6, 0xa7, 0xa1, 0x7f, 0xa8, 0xb3, 0x04, 0xe0,
	0xb7, 0xc1, 0x23, 0x38, 0xc8, 0xa6, 0xf7, 0x97, 0x93, 0x2c, 0xf1, 0x1d, 0xf4, 0xa0, 0x31, 0xbb,
	0xf6, 0x09, 0x1e, 0xc3, 0xe1, 0x74, 0x36, 0xcf, 0xaf, 0x66, 0x77, 0xd3, 0xc4, 0x6f, 0x20, 0x42,
	0x7b, 0x92, 0xdd, 0x64, 0xf3, 0x3c, 0x7d, 0x18, 0xa5, 0x69, 0x92, 0x26, 0x7e, 0x73, 0x18, 0xbc,
	0x6f, 0x43, 0xb2, 0xd9, 0x86, 0xe4, 0x73, 0x1b, 0x92, 0xb7, 0x5d, 0xe8, 0x6c, 0x76, 0xa1, 0xf3,
	0xb1, 0x0b, 0x9d, 0xc2, 0xb3, 0x9f, 0xbb, 0xf8, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x41, 0xe0,
	0x70, 0x68, 0x01, 0x00, 0x00,
}

func (m *ExtendedHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintExtendedHeaderRequest(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExtendedHeaderRequest_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedHeaderRequest_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintExtendedHeaderRequest(dAtA, i, uint64(m.Origin))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}
func (m *ExtendedHeaderRequest_Hash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedHeaderRequest_Hash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Hash != nil {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintExtendedHeaderRequest(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ExtendedHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StatusCode != 0 {
		i = encodeVarintExtendedHeaderRequest(dAtA, i, uint64(m.StatusCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintExtendedHeaderRequest(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExtendedHeaderRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovExtendedHeaderRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExtendedHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.Amount != 0 {
		n += 1 + sovExtendedHeaderRequest(uint64(m.Amount))
	}
	return n
}

func (m *ExtendedHeaderRequest_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovExtendedHeaderRequest(uint64(m.Origin))
	return n
}
func (m *ExtendedHeaderRequest_Hash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != nil {
		l = len(m.Hash)
		n += 1 + l + sovExtendedHeaderRequest(uint64(l))
	}
	return n
}
func (m *ExtendedHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovExtendedHeaderRequest(uint64(l))
	}
	if m.StatusCode != 0 {
		n += 1 + sovExtendedHeaderRequest(uint64(m.StatusCode))
	}
	return n
}

func sovExtendedHeaderRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExtendedHeaderRequest(x uint64) (n int) {
	return sovExtendedHeaderRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExtendedHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtendedHeaderRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeaderRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Data = &ExtendedHeaderRequest_Origin{v}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeaderRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExtendedHeaderRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedHeaderRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Data = &ExtendedHeaderRequest_Hash{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeaderRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExtendedHeaderRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtendedHeaderRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtendedHeaderRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeaderRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExtendedHeaderRequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedHeaderRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusCode", wireType)
			}
			m.StatusCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedHeaderRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatusCode |= StatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExtendedHeaderRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtendedHeaderRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtendedHeaderRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtendedHeaderRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedHeaderRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedHeaderRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExtendedHeaderRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExtendedHeaderRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExtendedHeaderRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExtendedHeaderRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtendedHeaderRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExtendedHeaderRequest = fmt.Errorf("proto: unexpected end of group")
)
